#name: CI / SonarQube
#
#on:
#  pull_request:
#    types: [opened, synchronize]
#  push:
#    branches:
#      - development
#
#jobs:
#  sonar:
#    runs-on: ubuntu-latest
#    steps:
#        - name: Checkout repository
#          uses: actions/checkout@v4
#
#        - name: Set up Java (para sonar-scanner)
#          uses: actions/setup-java@v4
#          with:
#            distribution: temurin
#            java-version: '21'
#            cache: gradle # could be Maven
#
#        - name: Install nodejs
#          uses: actions/setup-node@v4
#          with:
#            node-version: '22.x'
#
#        - name: Install dependencies
#          run: npm ci
#
#        - name: Build (opcional, seg√∫n tu proyecto)
#          run: npm run build
#
#        - name: Run SonarQube analysis
#          env:
#            SONAR_TOKEN:
#          run: npx sonarqube-scanner \
#              -Dsonar.projectKey=mi-proyecto \
#              -Dsonar.sources=src \
#              -Dsonar.host.url=http://localhost:9000 \
#              -Dsonar.login=$SONAR_TOKEN

name: Build

on:
  push:
    branches:
      - main


jobs:
  build:
    name: Build and analyze
    runs-on: [self-hosted, local]
    
    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        - name: SonarQube scan
          uses: SonarSource/sonarqube-scan-action@v5
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: SonarSource/sonarqube-quality-gate-action@v1
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: 